import { __decorate, __values } from 'tslib';
import { Injectable, ElementRef, Renderer2, Input, Directive, NgModule } from '@angular/core';
import { Subscription, fromEvent, empty } from 'rxjs';
import { CommonModule } from '@angular/common';

var ScrollService = /** @class */ (function () {
    function ScrollService() {
        var _this = this;
        this.scrollSub = new Subscription();
        this.resizeSub = new Subscription();
        // set initial value
        this.manageScrollPos();
        // create observable that we can subscribe to from component or directive
        this.scrollObs = typeof window !== 'undefined' ? fromEvent(window, 'scroll') : empty();
        // initiate subscription to update values
        this.scrollSub = this.scrollObs
            .subscribe(function () { return _this.manageScrollPos(); });
        // create observable for changes in screen size
        this.resizeObs = typeof window !== 'undefined' ? fromEvent(window, 'resize') : empty();
        // initiate subscription to update values
        this.resizeSub = this.resizeObs
            .subscribe(function () { return _this.manageScrollPos(); });
    }
    ScrollService.prototype.manageScrollPos = function () {
        // update service property
        this.pos = typeof window !== 'undefined' ? window.pageYOffset : 0;
    };
    ScrollService.prototype.ngOnDestroy = function () {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    };
    ScrollService = __decorate([
        Injectable()
    ], ScrollService);
    return ScrollService;
}());

var AnimateOnScrollDirective = /** @class */ (function () {
    function AnimateOnScrollDirective(elementRef, renderer, scroll) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.scroll = scroll;
        this.scrollSub = new Subscription();
        this.resizeSub = new Subscription();
        // Pixel offset from screen bottom to the animated element to determine the start of the animation
        this.offset = 80;
    }
    Object.defineProperty(AnimateOnScrollDirective.prototype, "id", {
        get: function () {
            return this.elementRef.nativeElement.id;
        },
        enumerable: true,
        configurable: true
    });
    AnimateOnScrollDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.animationName) {
            throw new Error('animationName required');
        }
        // default visibility to false
        this.isVisible = false;
        // subscribe to scroll event using service
        this.scrollSub = this.scroll.scrollObs
            .subscribe(function () { return _this.manageVisibility(); });
        // subscribe to resize event using service so scrolling position is always accurate
        this.resizeSub = this.scroll.resizeObs
            .subscribe(function () { return _this.manageVisibility(); });
    };
    AnimateOnScrollDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        // run visibility check initially in case the element is already visible in viewport
        setTimeout(function () { return _this.manageVisibility(); }, 1);
    };
    AnimateOnScrollDirective.prototype.ngOnDestroy = function () {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    };
    /**
     * check for visibility of element in viewport to add animation
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.manageVisibility = function () {
        if (this.isVisible) {
            // Optimisation; nothing to do if class has already been applied
            return;
        }
        // check for window height, may change with a window resize
        this.getWinHeight();
        // get vertical position for selected element
        this.getOffsetTop();
        // we should trigger the addition of the animation class a little after getting to the element
        var scrollTrigger = this.offsetTop + this.offset - this.winHeight;
        // using values updated in service
        if (this.scroll.pos >= scrollTrigger) {
            this.addAnimationClass();
        }
    };
    /**
     * utility function to mark element visible and add css class
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.addAnimationClass = function () {
        // mark this element visible, we won't remove the class after this
        this.isVisible = true;
        // use default for animate.css if no value provided
        this.setClass(this.animationName);
    };
    /**
     * utility function to add one or more css classes to element in DOM
     *
     * @param  {string} classes
     * @returns void
     */
    AnimateOnScrollDirective.prototype.setClass = function (classes) {
        var e_1, _a;
        try {
            for (var _b = __values(classes.split(' ')), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                this.renderer.addClass(this.elementRef.nativeElement, c);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * get window height utility function
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.getWinHeight = function () {
        this.winHeight = typeof window !== 'undefined' ? window.innerHeight : 0;
    };
    /**
     * get offsetTop value for element
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.getOffsetTop = function () {
        if (typeof this.elementRef.nativeElement.getBoundingClientRect === 'function') {
            var viewportTop = this.elementRef.nativeElement.getBoundingClientRect().top;
            var clientTop = this.elementRef.nativeElement.clientTop;
            // get vertical position for selected element
            this.offsetTop = viewportTop + this.scroll.pos - clientTop;
        }
        else {
            this.offsetTop = 0;
        }
    };
    AnimateOnScrollDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ScrollService }
    ]; };
    __decorate([
        Input()
    ], AnimateOnScrollDirective.prototype, "animationName", void 0);
    __decorate([
        Input()
    ], AnimateOnScrollDirective.prototype, "offset", void 0);
    AnimateOnScrollDirective = __decorate([
        Directive({
            selector: '[animateOnScroll]'
        })
    ], AnimateOnScrollDirective);
    return AnimateOnScrollDirective;
}());

var AnimateOnScrollModule = /** @class */ (function () {
    function AnimateOnScrollModule() {
    }
    AnimateOnScrollModule_1 = AnimateOnScrollModule;
    AnimateOnScrollModule.forRoot = function () {
        return {
            ngModule: AnimateOnScrollModule_1,
            providers: [ScrollService]
        };
    };
    var AnimateOnScrollModule_1;
    AnimateOnScrollModule = AnimateOnScrollModule_1 = __decorate([
        NgModule({
            imports: [
                CommonModule
            ],
            declarations: [
                AnimateOnScrollDirective
            ],
            exports: [
                AnimateOnScrollDirective
            ]
        })
    ], AnimateOnScrollModule);
    return AnimateOnScrollModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { AnimateOnScrollDirective, AnimateOnScrollModule, ScrollService };
//# sourceMappingURL=ng2-animate-on-scroll.js.map
