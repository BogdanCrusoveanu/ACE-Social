import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Subscription, empty, fromEvent } from 'rxjs';
var ScrollService = /** @class */ (function () {
    function ScrollService() {
        var _this = this;
        this.scrollSub = new Subscription();
        this.resizeSub = new Subscription();
        // set initial value
        this.manageScrollPos();
        // create observable that we can subscribe to from component or directive
        this.scrollObs = typeof window !== 'undefined' ? fromEvent(window, 'scroll') : empty();
        // initiate subscription to update values
        this.scrollSub = this.scrollObs
            .subscribe(function () { return _this.manageScrollPos(); });
        // create observable for changes in screen size
        this.resizeObs = typeof window !== 'undefined' ? fromEvent(window, 'resize') : empty();
        // initiate subscription to update values
        this.resizeSub = this.resizeObs
            .subscribe(function () { return _this.manageScrollPos(); });
    }
    ScrollService.prototype.manageScrollPos = function () {
        // update service property
        this.pos = typeof window !== 'undefined' ? window.pageYOffset : 0;
    };
    ScrollService.prototype.ngOnDestroy = function () {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    };
    ScrollService = __decorate([
        Injectable()
    ], ScrollService);
    return ScrollService;
}());
export { ScrollService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItYW5pbWF0ZS1vbi1zY3JvbGwvIiwic291cmNlcyI6WyJsaWIvc2Nyb2xsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFjLFlBQVksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR2xFO0lBUUU7UUFBQSxpQkFtQkM7UUF0Qk8sY0FBUyxHQUFpQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdDLGNBQVMsR0FBaUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUluRCxvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXZCLHlFQUF5RTtRQUN6RSxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFdkYseUNBQXlDO1FBQ3pDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVM7YUFDNUIsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsZUFBZSxFQUFFLEVBQXRCLENBQXNCLENBQUMsQ0FBQztRQUUzQywrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRXZGLHlDQUF5QztRQUN6QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTO2FBQzVCLFNBQVMsQ0FBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLGVBQWUsRUFBRSxFQUF0QixDQUFzQixDQUFDLENBQUM7SUFFN0MsQ0FBQztJQUdPLHVDQUFlLEdBQXZCO1FBRUUsMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxNQUFNLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFcEUsQ0FBQztJQUVELG1DQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQXhDVSxhQUFhO1FBRHpCLFVBQVUsRUFBRTtPQUNBLGFBQWEsQ0EwQ3pCO0lBQUQsb0JBQUM7Q0FBQSxBQTFDRCxJQTBDQztTQTFDWSxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24sIGVtcHR5LCBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNjcm9sbFNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuXG4gIHNjcm9sbE9iczogT2JzZXJ2YWJsZTxhbnk+O1xuICByZXNpemVPYnM6IE9ic2VydmFibGU8YW55PjtcbiAgcG9zOiBudW1iZXI7XG4gIHByaXZhdGUgc2Nyb2xsU3ViOiBTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gIHByaXZhdGUgcmVzaXplU3ViOiBTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICAvLyBzZXQgaW5pdGlhbCB2YWx1ZVxuICAgIHRoaXMubWFuYWdlU2Nyb2xsUG9zKCk7XG5cbiAgICAvLyBjcmVhdGUgb2JzZXJ2YWJsZSB0aGF0IHdlIGNhbiBzdWJzY3JpYmUgdG8gZnJvbSBjb21wb25lbnQgb3IgZGlyZWN0aXZlXG4gICAgdGhpcy5zY3JvbGxPYnMgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IGZyb21FdmVudCh3aW5kb3csICdzY3JvbGwnKSA6IGVtcHR5KCk7XG5cbiAgICAvLyBpbml0aWF0ZSBzdWJzY3JpcHRpb24gdG8gdXBkYXRlIHZhbHVlc1xuICAgIHRoaXMuc2Nyb2xsU3ViID0gdGhpcy5zY3JvbGxPYnNcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5tYW5hZ2VTY3JvbGxQb3MoKSk7XG5cbiAgICAvLyBjcmVhdGUgb2JzZXJ2YWJsZSBmb3IgY2hhbmdlcyBpbiBzY3JlZW4gc2l6ZVxuICAgIHRoaXMucmVzaXplT2JzID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBmcm9tRXZlbnQod2luZG93LCAncmVzaXplJykgOiBlbXB0eSgpO1xuXG4gICAgLy8gaW5pdGlhdGUgc3Vic2NyaXB0aW9uIHRvIHVwZGF0ZSB2YWx1ZXNcbiAgICB0aGlzLnJlc2l6ZVN1YiA9IHRoaXMucmVzaXplT2JzXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMubWFuYWdlU2Nyb2xsUG9zKCkpO1xuXG4gIH1cblxuXG4gIHByaXZhdGUgbWFuYWdlU2Nyb2xsUG9zKCk6IHZvaWQge1xuXG4gICAgLy8gdXBkYXRlIHNlcnZpY2UgcHJvcGVydHlcbiAgICB0aGlzLnBvcyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93LnBhZ2VZT2Zmc2V0IDogMDtcblxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zY3JvbGxTdWIudW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnJlc2l6ZVN1Yi51bnN1YnNjcmliZSgpO1xuICB9XG5cbn1cbiJdfQ==