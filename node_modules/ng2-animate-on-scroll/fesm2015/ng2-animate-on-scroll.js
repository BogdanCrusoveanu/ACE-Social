import { __decorate } from 'tslib';
import { Injectable, ElementRef, Renderer2, Input, Directive, NgModule } from '@angular/core';
import { Subscription, fromEvent, empty } from 'rxjs';
import { CommonModule } from '@angular/common';

let ScrollService = class ScrollService {
    constructor() {
        this.scrollSub = new Subscription();
        this.resizeSub = new Subscription();
        // set initial value
        this.manageScrollPos();
        // create observable that we can subscribe to from component or directive
        this.scrollObs = typeof window !== 'undefined' ? fromEvent(window, 'scroll') : empty();
        // initiate subscription to update values
        this.scrollSub = this.scrollObs
            .subscribe(() => this.manageScrollPos());
        // create observable for changes in screen size
        this.resizeObs = typeof window !== 'undefined' ? fromEvent(window, 'resize') : empty();
        // initiate subscription to update values
        this.resizeSub = this.resizeObs
            .subscribe(() => this.manageScrollPos());
    }
    manageScrollPos() {
        // update service property
        this.pos = typeof window !== 'undefined' ? window.pageYOffset : 0;
    }
    ngOnDestroy() {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    }
};
ScrollService = __decorate([
    Injectable()
], ScrollService);

let AnimateOnScrollDirective = class AnimateOnScrollDirective {
    constructor(elementRef, renderer, scroll) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.scroll = scroll;
        this.scrollSub = new Subscription();
        this.resizeSub = new Subscription();
        // Pixel offset from screen bottom to the animated element to determine the start of the animation
        this.offset = 80;
    }
    get id() {
        return this.elementRef.nativeElement.id;
    }
    ngOnInit() {
        if (!this.animationName) {
            throw new Error('animationName required');
        }
        // default visibility to false
        this.isVisible = false;
        // subscribe to scroll event using service
        this.scrollSub = this.scroll.scrollObs
            .subscribe(() => this.manageVisibility());
        // subscribe to resize event using service so scrolling position is always accurate
        this.resizeSub = this.scroll.resizeObs
            .subscribe(() => this.manageVisibility());
    }
    ngAfterViewInit() {
        // run visibility check initially in case the element is already visible in viewport
        setTimeout(() => this.manageVisibility(), 1);
    }
    ngOnDestroy() {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    }
    /**
     * check for visibility of element in viewport to add animation
     *
     * @returns void
     */
    manageVisibility() {
        if (this.isVisible) {
            // Optimisation; nothing to do if class has already been applied
            return;
        }
        // check for window height, may change with a window resize
        this.getWinHeight();
        // get vertical position for selected element
        this.getOffsetTop();
        // we should trigger the addition of the animation class a little after getting to the element
        const scrollTrigger = this.offsetTop + this.offset - this.winHeight;
        // using values updated in service
        if (this.scroll.pos >= scrollTrigger) {
            this.addAnimationClass();
        }
    }
    /**
     * utility function to mark element visible and add css class
     *
     * @returns void
     */
    addAnimationClass() {
        // mark this element visible, we won't remove the class after this
        this.isVisible = true;
        // use default for animate.css if no value provided
        this.setClass(this.animationName);
    }
    /**
     * utility function to add one or more css classes to element in DOM
     *
     * @param  {string} classes
     * @returns void
     */
    setClass(classes) {
        for (const c of classes.split(' ')) {
            this.renderer.addClass(this.elementRef.nativeElement, c);
        }
    }
    /**
     * get window height utility function
     *
     * @returns void
     */
    getWinHeight() {
        this.winHeight = typeof window !== 'undefined' ? window.innerHeight : 0;
    }
    /**
     * get offsetTop value for element
     *
     * @returns void
     */
    getOffsetTop() {
        if (typeof this.elementRef.nativeElement.getBoundingClientRect === 'function') {
            const viewportTop = this.elementRef.nativeElement.getBoundingClientRect().top;
            const clientTop = this.elementRef.nativeElement.clientTop;
            // get vertical position for selected element
            this.offsetTop = viewportTop + this.scroll.pos - clientTop;
        }
        else {
            this.offsetTop = 0;
        }
    }
};
AnimateOnScrollDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: ScrollService }
];
__decorate([
    Input()
], AnimateOnScrollDirective.prototype, "animationName", void 0);
__decorate([
    Input()
], AnimateOnScrollDirective.prototype, "offset", void 0);
AnimateOnScrollDirective = __decorate([
    Directive({
        selector: '[animateOnScroll]'
    })
], AnimateOnScrollDirective);

var AnimateOnScrollModule_1;
let AnimateOnScrollModule = AnimateOnScrollModule_1 = class AnimateOnScrollModule {
    static forRoot() {
        return {
            ngModule: AnimateOnScrollModule_1,
            providers: [ScrollService]
        };
    }
};
AnimateOnScrollModule = AnimateOnScrollModule_1 = __decorate([
    NgModule({
        imports: [
            CommonModule
        ],
        declarations: [
            AnimateOnScrollDirective
        ],
        exports: [
            AnimateOnScrollDirective
        ]
    })
], AnimateOnScrollModule);

/**
 * Generated bundle index. Do not edit.
 */

export { AnimateOnScrollDirective, AnimateOnScrollModule, ScrollService };
//# sourceMappingURL=ng2-animate-on-scroll.js.map
