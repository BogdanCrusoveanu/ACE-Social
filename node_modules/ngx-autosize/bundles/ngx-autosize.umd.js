(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-autosize', ['exports', '@angular/core'], factory) :
    (global = global || self, factory(global['ngx-autosize'] = {}, global.ng.core));
}(this, function (exports, core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MAX_LOOKUP_RETRIES = 3;
    var AutosizeDirective = /** @class */ (function () {
        function AutosizeDirective(element, _zone) {
            this.element = element;
            this._zone = _zone;
            this.onlyGrow = false;
            this.useImportant = false;
            this.resized = new core.EventEmitter();
            this.retries = 0;
            this._destroyed = false;
            if (this.element.nativeElement.tagName !== 'TEXTAREA') {
                this._findNestedTextArea();
            }
            else {
                this.textAreaEl = this.element.nativeElement;
                this.textAreaEl.style.overflow = 'hidden';
                this._onTextAreaFound();
            }
        }
        Object.defineProperty(AutosizeDirective.prototype, "minRows", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._minRows = value;
                if (this.textAreaEl) {
                    this.textAreaEl.rows = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        ;
        /**
         * @param {?} textArea
         * @return {?}
         */
        AutosizeDirective.prototype.onInput = /**
         * @param {?} textArea
         * @return {?}
         */
        function (textArea) {
            this.adjust();
        };
        /**
         * @return {?}
         */
        AutosizeDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._destroyed = true;
            if (this._windowResizeHandler) {
                window.removeEventListener('resize', this._windowResizeHandler, false);
            }
        };
        /**
         * @return {?}
         */
        AutosizeDirective.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
        function () {
            this.adjust();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AutosizeDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            this.adjust(true);
        };
        /**
         * @return {?}
         */
        AutosizeDirective.prototype._findNestedTextArea = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.textAreaEl = this.element.nativeElement.querySelector('TEXTAREA');
            if (!this.textAreaEl && this.element.nativeElement.shadowRoot) {
                this.textAreaEl = this.element.nativeElement.shadowRoot.querySelector('TEXTAREA');
            }
            if (!this.textAreaEl) {
                if (this.retries >= MAX_LOOKUP_RETRIES) {
                    console.warn('ngx-autosize: textarea not found');
                }
                else {
                    this.retries++;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this._findNestedTextArea();
                    }), 100);
                }
                return;
            }
            this.textAreaEl.style.overflow = 'hidden';
            this._onTextAreaFound();
        };
        /**
         * @return {?}
         */
        AutosizeDirective.prototype._onTextAreaFound = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this._addWindowResizeHandler();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.adjust();
            }));
        };
        /**
         * @return {?}
         */
        AutosizeDirective.prototype._addWindowResizeHandler = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this._windowResizeHandler = Debounce((/**
             * @return {?}
             */
            function () {
                _this._zone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.adjust();
                }));
            }), 200);
            this._zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                window.addEventListener('resize', _this._windowResizeHandler, false);
            }));
        };
        /**
         * @param {?=} inputsChanged
         * @return {?}
         */
        AutosizeDirective.prototype.adjust = /**
         * @param {?=} inputsChanged
         * @return {?}
         */
        function (inputsChanged) {
            if (inputsChanged === void 0) { inputsChanged = false; }
            if (!this._destroyed && this.textAreaEl) {
                /** @type {?} */
                var currentText = this.textAreaEl.value;
                if (inputsChanged === false &&
                    currentText === this._oldContent &&
                    this.textAreaEl.offsetWidth === this._oldWidth) {
                    return;
                }
                this._oldContent = currentText;
                this._oldWidth = this.textAreaEl.offsetWidth;
                /** @type {?} */
                var clone = this.textAreaEl.cloneNode(true);
                /** @type {?} */
                var parent_1 = this.textAreaEl.parentNode;
                clone.style.width = this.textAreaEl.offsetWidth + 'px';
                clone.style.visibility = 'hidden';
                clone.style.position = 'absolute';
                clone.textContent = currentText;
                parent_1.appendChild(clone);
                clone.style.overflow = 'hidden';
                clone.style.height = 'auto';
                /** @type {?} */
                var height = clone.scrollHeight;
                // add into height top and bottom borders' width
                /** @type {?} */
                var computedStyle = window.getComputedStyle(clone, null);
                height += parseInt(computedStyle.getPropertyValue('border-top-width'));
                height += parseInt(computedStyle.getPropertyValue('border-bottom-width'));
                /** @type {?} */
                var oldHeight = this.textAreaEl.offsetHeight;
                /** @type {?} */
                var willGrow = height > oldHeight;
                if (this.onlyGrow === false || willGrow) {
                    /** @type {?} */
                    var lineHeight = this._getLineHeight();
                    /** @type {?} */
                    var rowsCount = height / lineHeight;
                    if (this._minRows && this._minRows >= rowsCount) {
                        height = this._minRows * lineHeight;
                    }
                    else if (this.maxRows && this.maxRows <= rowsCount) {
                        // never shrink the textarea if onlyGrow is true
                        /** @type {?} */
                        var maxHeight = this.maxRows * lineHeight;
                        height = this.onlyGrow ? Math.max(maxHeight, oldHeight) : maxHeight;
                        this.textAreaEl.style.overflow = 'auto';
                    }
                    else {
                        this.textAreaEl.style.overflow = 'hidden';
                    }
                    /** @type {?} */
                    var heightStyle = height + 'px';
                    /** @type {?} */
                    var important = this.useImportant ? 'important' : '';
                    this.textAreaEl.style.setProperty('height', heightStyle, important);
                    this.resized.emit(height);
                }
                parent_1.removeChild(clone);
            }
        };
        /**
         * @private
         * @return {?}
         */
        AutosizeDirective.prototype._getLineHeight = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var lineHeight = parseInt(this.textAreaEl.style.lineHeight, 10);
            if (isNaN(lineHeight) && window.getComputedStyle) {
                /** @type {?} */
                var styles = window.getComputedStyle(this.textAreaEl);
                lineHeight = parseInt(styles.lineHeight, 10);
            }
            if (isNaN(lineHeight)) {
                /** @type {?} */
                var fontSize = window.getComputedStyle(this.textAreaEl, null).getPropertyValue('font-size');
                lineHeight = Math.floor(parseInt(fontSize.replace('px', ''), 10) * 1.5);
            }
            return lineHeight;
        };
        AutosizeDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[autosize]'
                    },] }
        ];
        /** @nocollapse */
        AutosizeDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.NgZone }
        ]; };
        AutosizeDirective.propDecorators = {
            minRows: [{ type: core.Input }],
            maxRows: [{ type: core.Input }],
            onlyGrow: [{ type: core.Input }],
            useImportant: [{ type: core.Input }],
            resized: [{ type: core.Output }],
            onInput: [{ type: core.HostListener, args: ['input', ['$event.target'],] }]
        };
        return AutosizeDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AutosizeDirective.prototype._minRows;
        /** @type {?} */
        AutosizeDirective.prototype.maxRows;
        /** @type {?} */
        AutosizeDirective.prototype.onlyGrow;
        /** @type {?} */
        AutosizeDirective.prototype.useImportant;
        /** @type {?} */
        AutosizeDirective.prototype.resized;
        /**
         * @type {?}
         * @private
         */
        AutosizeDirective.prototype.retries;
        /**
         * @type {?}
         * @private
         */
        AutosizeDirective.prototype.textAreaEl;
        /**
         * @type {?}
         * @private
         */
        AutosizeDirective.prototype._oldContent;
        /**
         * @type {?}
         * @private
         */
        AutosizeDirective.prototype._oldWidth;
        /**
         * @type {?}
         * @private
         */
        AutosizeDirective.prototype._windowResizeHandler;
        /**
         * @type {?}
         * @private
         */
        AutosizeDirective.prototype._destroyed;
        /** @type {?} */
        AutosizeDirective.prototype.element;
        /**
         * @type {?}
         * @private
         */
        AutosizeDirective.prototype._zone;
        /* Skipping unhandled member: ;*/
    }
    /**
     * @param {?} func
     * @param {?} wait
     * @param {?=} immediate
     * @return {?}
     */
    function Debounce(func, wait, immediate) {
        if (immediate === void 0) { immediate = false; }
        /** @type {?} */
        var timeout;
        return (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var context = this;
            /** @type {?} */
            var args = arguments;
            /** @type {?} */
            var later = (/**
             * @return {?}
             */
            function () {
                timeout = null;
                if (!immediate) {
                    func.apply(context, args);
                }
            });
            /** @type {?} */
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) {
                func.apply(context, args);
            }
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AutosizeModule = /** @class */ (function () {
        function AutosizeModule() {
        }
        AutosizeModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [AutosizeDirective],
                        imports: [],
                        exports: [AutosizeDirective]
                    },] }
        ];
        return AutosizeModule;
    }());

    exports.AutosizeDirective = AutosizeDirective;
    exports.AutosizeModule = AutosizeModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-autosize.umd.js.map
